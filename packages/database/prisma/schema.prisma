// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres", "typedSql"]
  output          = "../generated/client"
}

enum Role {
  ADMIN
  DEVELOPER
  COLLABORATOR
  VIEWER
}

enum FeedbackStatus {
  OPEN
  UNDER_REVIEW
  PLANNED
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum DomainStatus {
  PENDING
  CONFIRMED_OWNERSHIP
  VERIFIED
  FAILED
}

enum Priority {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

enum ActivityType {
  FEEDBACK_CREATE
  FEEDBACK_UPDATE
  FEEDBACK_VOTE
  FEEDBACK_COMMENT
  FEEDBACK_STATUS_CHANGE
  FEEDBACK_PRIORITY_CHANGE
  FEEDBACK_TAG_ADD
  FEEDBACK_TAG_REMOVE
  FEEDBACK_CATEGORY_CHANGE
  FEEDBACK_OWNER_CHANGE
  FEEDBACK_BOARD_CHANGE
  FEEDBACK_ESTIMATED_DELIVERY_CHANGE
  FEEDBACK_SCREENSHOT_ADD
  FEEDBACK_SCREENSHOT_REMOVE
  FEEDBACK_MERGE
}

enum Theme {
  LIGHT
  DARK
  SYSTEM
}

enum Language {
  EN
  RO
}

enum AdminReportFrequency {
  DAILY
  WEEKLY
  NEVER
}

enum OAuthProvider {
  GITHUB
  GOOGLE
}

enum ChangelogTag {
  NEW
  IMPROVED
  FIXED
}

enum ChangelogStatus {
  PUBLISHED
  SCHEDULED
  DRAFT
}

model User {
  id       String  @id @default(uuid())
  name     String
  email    String  @unique
  avatar   String?
  password String?

  os      String?
  browser String?
  device  String?

  reportFrequency AdminReportFrequency @default(WEEKLY)
  language        Language             @default(EN)
  invitation      ApplicationInvite?   @relation("ApplicationInviteUser")

  applications           Application[]       @relation("ApplicationOwner")
  members                Member[]
  feedbacks              Feedback[]          @relation("FeedbackAuthor")
  feedbacksOwned         Feedback[]          @relation("FeedbackOwner")
  votes                  Vote[]
  activities             Activity[]
  likes                  ActivityLike[]
  changelogLikes         ChangelogLike[]
  oauthAccounts          OAuthAccount[]
  invitesSent            ApplicationInvite[] @relation("ApplicationInviteInvitedBy")
  changelogSubscriptions Application[]       @relation("ChangelogSubscriber")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
}

model OAuthAccount {
  id                String        @id @default(uuid())
  provider          OAuthProvider @default(GOOGLE)
  providerAccountId String
  accessToken       String?
  refreshToken      String?
  expiresAt         DateTime?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, provider])
}

model Member {
  id                        String  @id @default(uuid())
  role                      Role    @default(COLLABORATOR) // ADMIN/DEVELOPER/etc.
  subscribedToUncategorized Boolean @default(true)

  user          User        @relation(fields: [userId], references: [id])
  userId        String
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId String

  categoriesSubscribed FeedbackCategory[] @relation("FeedbackCategorySubscriptions")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, applicationId]) // Prevent duplicate members
  @@index([userId, applicationId])
}

model Application {
  id                      String       @id @default(uuid())
  name                    String // Display name (e.g., "Google")
  subdomain               String       @unique // Reserved subdomain (e.g., "google.supaboard.io")
  customDomain            String?      @unique // Optional custom domain (e.g., "feedback.google.com")
  domainStatus            DomainStatus @default(PENDING) // Verification state
  verificationCode        String? // For DNS TXT record verification
  logo                    String?
  icon                    String?
  color                   String       @default("#a684ff")
  preferredTheme          Theme        @default(SYSTEM)
  preferredLanguage       Language     @default(EN)
  isChangelogPublic       Boolean      @default(true)
  isChangelogSubscribable Boolean      @default(false)
  changelogSubscribers    User[]       @relation("ChangelogSubscriber")

  ownerId String
  owner   User   @relation("ApplicationOwner", fields: [ownerId], references: [id])

  members         Member[]
  feedback        Feedback[]
  boards          Board[]
  invites         ApplicationInvite[]
  roadmaps        Roadmap[]
  changelogs      Changelog[]
  changelogLabels ChangelogLabel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([subdomain])
}

model ApplicationInvite {
  id        String                  @id @default(uuid())
  email     String
  role      Role
  acceptedAt DateTime?
  rejectedAt DateTime?

  applicationId String
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  userId        String?     @unique
  user          User?       @relation("ApplicationInviteUser", fields: [userId], references: [id])
  invitedById   String
  invitedBy     User        @relation("ApplicationInviteInvitedBy", fields: [invitedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, applicationId])
}

model Feedback {
  id                String         @id @default(uuid())
  title             String
  description       String?
  slug              String
  status            FeedbackStatus @default(OPEN)
  priority          Priority?
  deviceInfo        String?
  appVersion        String?
  estimatedDelivery DateTime?
  publicEstimate    Boolean        @default(true)
  edited            Boolean        @default(false)
  roadmapItems      RoadmapItem[]

  boardId       String
  board         Board             @relation(fields: [boardId], references: [id], onDelete: Cascade)
  authorId      String?
  author        User?             @relation(name: "FeedbackAuthor", fields: [authorId], references: [id], onDelete: SetNull)
  ownerId       String?
  owner         User?             @relation(name: "FeedbackOwner", fields: [ownerId], references: [id], onDelete: SetNull)
  applicationId String
  application   Application       @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  categoryId    String?
  category      FeedbackCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  changelogId   String?
  changelog     Changelog?        @relation(fields: [changelogId], references: [id], onDelete: SetNull)
  mergedIntoId  String?
  mergedInto    Feedback?         @relation("FeedbackMerged", fields: [mergedIntoId], references: [id], onDelete: Cascade)

  tags                 Tag[]
  votes                Vote[]
  activities           Activity[]
  files                File[]
  merged               Feedback[] @relation("FeedbackMerged")
  activitiesMergedAway Activity[] @relation("ActivityMergedAway")
  votesMergedAway      Vote[]     @relation("VoteMergedAway")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([boardId, slug])
  @@index([applicationId, status])
}

model File {
  id          String @id @default(uuid())
  key         String @unique
  name        String
  extension   String
  contentType String
  size        Int

  feedbackId         String?
  feedback           Feedback? @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  feedbackActivityId String?
  feedbackActivity   Activity? @relation(fields: [feedbackActivityId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([feedbackId])
}

model FeedbackCategory {
  id   String @id @default(uuid())
  name String
  slug String

  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  subscribers Member[]   @relation("FeedbackCategorySubscriptions")
  feedbacks   Feedback[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([boardId, slug])
}

model Board {
  id          String  @id @default(uuid())
  name        String
  description String?
  slug        String  @default("feature-requests")
  public      Boolean @default(false)

  callToAction    String  @default("Share your feedback...")
  title           String? @default("Short, descriptive title")
  details         String? @default("Any additional detailsâ€¦")
  detailsRequired Boolean @default(false)
  buttonText      String? @default("Create Feedback")

  showOnHome Boolean @default(false)

  applicationId String
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  feedbacks  Feedback[]
  categories FeedbackCategory[]
  tags       Tag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([applicationId, slug])
}

model Tag {
  id   String @id @default(uuid())
  name String

  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  feedbacks Feedback[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Activity {
  id     String       @id @default(uuid())
  public Boolean      @default(true)
  pinned Boolean      @default(false)
  edited Boolean      @default(false)
  type   ActivityType
  data   Json

  feedbackId   String
  feedback     Feedback  @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  authorId     String
  author       User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  mergedFromId String?
  mergedFrom   Feedback? @relation("ActivityMergedAway", fields: [mergedFromId], references: [id], onDelete: Cascade)
  threadId     String?
  thread       Activity? @relation("ActivityThread", fields: [threadId], references: [id], onDelete: Cascade)

  replies Activity[]     @relation("ActivityThread")
  likes   ActivityLike[]
  files   File[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ActivityLike {
  id         String   @id @default(uuid())
  activityId String
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  authorId   String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([activityId, authorId])
}

model Vote {
  id String @id @default(uuid())

  feedbackId   String
  feedback     Feedback  @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  authorId     String
  author       User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  mergedFromId String?
  mergedFrom   Feedback? @relation("VoteMergedAway", fields: [mergedFromId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([feedbackId, authorId])
}

model RoadmapItem {
  id     String @id @default(uuid())
  impact Int    @default(0)
  effort Int    @default(1)

  feedbackId String
  feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  roadmapId  String
  roadmap    Roadmap  @relation(fields: [roadmapId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([feedbackId, roadmapId])
}

model Roadmap {
  id   String @id @default(uuid())
  name String
  slug String

  applicationId String
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  items RoadmapItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([applicationId, slug])
  @@index([applicationId, slug])
}

model ChangelogLabel {
  id   String @id @default(uuid())
  name String

  applicationId String
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  changelogs Changelog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([applicationId])
}

model Changelog {
  id          String          @id @default(uuid())
  title       String
  slug        String          @unique
  description String
  scheduledAt DateTime?
  publishedAt DateTime?
  status      ChangelogStatus @default(DRAFT)
  views       Int             @default(0)

  applicationId String
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  tags            ChangelogTag[]
  labels          ChangelogLabel[]
  linkedFeedbacks Feedback[]
  likes           ChangelogLike[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([applicationId, slug])
  @@index([applicationId, slug])
}

model ChangelogLike {
  id String @id @default(uuid())

  changelogId String
  changelog   Changelog @relation(fields: [changelogId], references: [id], onDelete: Cascade)
  authorId    String
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([changelogId, authorId])
  @@index([changelogId, authorId])
}
